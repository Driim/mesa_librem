From: =?utf-8?q?Guido_G=C3=BCnther?= <agx@sigxcpu.org>
Date: Wed, 10 Oct 2018 20:36:00 +0200
Subject: s/etna_cmd_/etna_drm/
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

Signed-off-by: Guido GÃ¼nther <guido.gunther@puri.sm>
---
 src/gallium/drivers/etnaviv/etnaviv_blt.c          |  6 +-
 src/gallium/drivers/etnaviv/etnaviv_context.c      | 10 +--
 src/gallium/drivers/etnaviv/etnaviv_drmif.h        | 32 +++++-----
 src/gallium/drivers/etnaviv/etnaviv_emit.c         | 16 ++---
 src/gallium/drivers/etnaviv/etnaviv_emit.h         | 72 +++++++++++-----------
 src/gallium/drivers/etnaviv/etnaviv_fence.c        |  2 +-
 src/gallium/drivers/etnaviv/etnaviv_query_pm.c     |  2 +-
 src/gallium/drivers/etnaviv/etnaviv_rs.c           |  6 +-
 .../winsys/etnaviv/drm/etnaviv_drm_cmd_stream.c    | 20 +++---
 9 files changed, 83 insertions(+), 83 deletions(-)

diff --git a/src/gallium/drivers/etnaviv/etnaviv_blt.c b/src/gallium/drivers/etnaviv/etnaviv_blt.c
index 52731a9..4d7982a 100644
--- a/src/gallium/drivers/etnaviv/etnaviv_blt.c
+++ b/src/gallium/drivers/etnaviv/etnaviv_blt.c
@@ -94,7 +94,7 @@ blt_compute_swizzle_bits(const struct blt_imginfo *img, bool for_dest)
 static void
 emit_blt_clearimage(struct etna_cmd_stream *stream, const struct blt_clear_op *op)
 {
-   etna_cmd_stream_reserve(stream, 64*2); /* Make sure BLT op doesn't get broken up */
+   etna_drm_cmd_stream_reserve(stream, 64*2); /* Make sure BLT op doesn't get broken up */
 
    etna_set_state(stream, VIVS_BLT_ENABLE, 0x00000001);
    assert(op->dest.bpp);
@@ -133,7 +133,7 @@ emit_blt_clearimage(struct etna_cmd_stream *stream, const struct blt_clear_op *o
 static void
 emit_blt_copyimage(struct etna_cmd_stream *stream, const struct blt_imgcopy_op *op)
 {
-   etna_cmd_stream_reserve(stream, 64*2); /* Never allow BLT sequences to be broken up */
+   etna_drm_cmd_stream_reserve(stream, 64*2); /* Never allow BLT sequences to be broken up */
 
    etna_set_state(stream, VIVS_BLT_ENABLE, 0x00000001);
    etna_set_state(stream, VIVS_BLT_CONFIG,
@@ -179,7 +179,7 @@ static void
 emit_blt_inplace(struct etna_cmd_stream *stream, const struct blt_inplace_op *op)
 {
    assert(op->bpp > 0 && util_is_power_of_two_nonzero(op->bpp));
-   etna_cmd_stream_reserve(stream, 64*2); /* Never allow BLT sequences to be broken up */
+   etna_drm_cmd_stream_reserve(stream, 64*2); /* Never allow BLT sequences to be broken up */
    etna_set_state(stream, VIVS_BLT_ENABLE, 0x00000001);
    etna_set_state(stream, VIVS_BLT_CONFIG,
          VIVS_BLT_CONFIG_INPLACE_CACHE_MODE(op->cache_mode) |
diff --git a/src/gallium/drivers/etnaviv/etnaviv_context.c b/src/gallium/drivers/etnaviv/etnaviv_context.c
index 81c8596..8e9c40d 100644
--- a/src/gallium/drivers/etnaviv/etnaviv_context.c
+++ b/src/gallium/drivers/etnaviv/etnaviv_context.c
@@ -70,7 +70,7 @@ etna_context_destroy(struct pipe_context *pctx)
       u_upload_destroy(pctx->stream_uploader);
 
    if (ctx->stream)
-      etna_cmd_stream_del(ctx->stream);
+      etna_drm_cmd_stream_del(ctx->stream);
 
    slab_destroy_child(&ctx->transfer_pool);
 
@@ -314,9 +314,9 @@ etna_flush(struct pipe_context *pctx, struct pipe_fence_handle **fence,
    list_for_each_entry(struct etna_hw_query, hq, &ctx->active_hw_queries, node)
       etna_hw_query_suspend(hq, ctx);
 
-   etna_cmd_stream_flush2(ctx->stream, ctx->in_fence_fd,
-			  (flags & PIPE_FLUSH_FENCE_FD) ? &out_fence_fd :
-			  NULL);
+   etna_drm_cmd_stream_flush2(ctx->stream, ctx->in_fence_fd,
+			      (flags & PIPE_FLUSH_FENCE_FD) ? &out_fence_fd :
+			      NULL);
 
    list_for_each_entry(struct etna_hw_query, hq, &ctx->active_hw_queries, node)
       etna_hw_query_resume(hq, ctx);
@@ -438,7 +438,7 @@ etna_context_create(struct pipe_screen *pscreen, void *priv, unsigned flags)
    pctx->const_uploader = pctx->stream_uploader;
 
    screen = etna_screen(pscreen);
-   ctx->stream = etna_cmd_stream_new(screen->pipe, 0x2000, &etna_cmd_stream_reset_notify, ctx);
+   ctx->stream = etna_drm_cmd_stream_new(screen->pipe, 0x2000, &etna_cmd_stream_reset_notify, ctx);
    if (ctx->stream == NULL)
       goto fail;
 
diff --git a/src/gallium/drivers/etnaviv/etnaviv_drmif.h b/src/gallium/drivers/etnaviv/etnaviv_drmif.h
index 455e334..4f83d1b 100644
--- a/src/gallium/drivers/etnaviv/etnaviv_drmif.h
+++ b/src/gallium/drivers/etnaviv/etnaviv_drmif.h
@@ -139,46 +139,46 @@ struct etna_cmd_stream {
 	uint32_t size;		/* in 32-bit words */
 };
 
-struct etna_cmd_stream *etna_cmd_stream_new(struct etna_pipe *pipe, uint32_t size,
+struct etna_cmd_stream *etna_drm_cmd_stream_new(struct etna_pipe *pipe, uint32_t size,
 		void (*reset_notify)(struct etna_cmd_stream *stream, void *priv),
 		void *priv);
-void etna_cmd_stream_del(struct etna_cmd_stream *stream);
-uint32_t etna_cmd_stream_timestamp(struct etna_cmd_stream *stream);
-void etna_cmd_stream_flush(struct etna_cmd_stream *stream);
-void etna_cmd_stream_flush2(struct etna_cmd_stream *stream, int in_fence_fd,
+void etna_drm_cmd_stream_del(struct etna_cmd_stream *stream);
+uint32_t etna_drm_cmd_stream_timestamp(struct etna_cmd_stream *stream);
+void etna_drm_cmd_stream_flush(struct etna_cmd_stream *stream);
+void etna_drm_cmd_stream_flush2(struct etna_cmd_stream *stream, int in_fence_fd,
 			    int *out_fence_fd);
-void etna_cmd_stream_finish(struct etna_cmd_stream *stream);
+void etna_drm_cmd_stream_finish(struct etna_cmd_stream *stream);
 
-static inline uint32_t etna_cmd_stream_avail(struct etna_cmd_stream *stream)
+static inline uint32_t etna_drm_cmd_stream_avail(struct etna_cmd_stream *stream)
 {
 	static const uint32_t END_CLEARANCE = 2; /* LINK op code */
 
 	return stream->size - stream->offset - END_CLEARANCE;
 }
 
-static inline void etna_cmd_stream_reserve(struct etna_cmd_stream *stream, size_t n)
+static inline void etna_drm_cmd_stream_reserve(struct etna_cmd_stream *stream, size_t n)
 {
-	if (etna_cmd_stream_avail(stream) < n)
-		etna_cmd_stream_flush(stream);
+	if (etna_drm_cmd_stream_avail(stream) < n)
+		etna_drm_cmd_stream_flush(stream);
 }
 
-static inline void etna_cmd_stream_emit(struct etna_cmd_stream *stream, uint32_t data)
+static inline void etna_drm_cmd_stream_emit(struct etna_cmd_stream *stream, uint32_t data)
 {
 	stream->buffer[stream->offset++] = data;
 }
 
-static inline uint32_t etna_cmd_stream_get(struct etna_cmd_stream *stream, uint32_t offset)
+static inline uint32_t etna_drm_cmd_stream_get(struct etna_cmd_stream *stream, uint32_t offset)
 {
 	return stream->buffer[offset];
 }
 
-static inline void etna_cmd_stream_set(struct etna_cmd_stream *stream, uint32_t offset,
+static inline void etna_drm_cmd_stream_set(struct etna_cmd_stream *stream, uint32_t offset,
 		uint32_t data)
 {
 	stream->buffer[offset] = data;
 }
 
-static inline uint32_t etna_cmd_stream_offset(struct etna_cmd_stream *stream)
+static inline uint32_t etna_drm_cmd_stream_offset(struct etna_cmd_stream *stream)
 {
 	return stream->offset;
 }
@@ -191,7 +191,7 @@ struct etna_reloc {
 	uint32_t offset;
 };
 
-void etna_cmd_stream_reloc(struct etna_cmd_stream *stream, const struct etna_reloc *r);
+void etna_drm_cmd_stream_reloc(struct etna_cmd_stream *stream, const struct etna_reloc *r);
 
 /* performance monitoring functions:
  */
@@ -211,6 +211,6 @@ struct etna_perf {
 	uint32_t offset;
 };
 
-void etna_cmd_stream_perf(struct etna_cmd_stream *stream, const struct etna_perf *p);
+void etna_drm_cmd_stream_perf(struct etna_cmd_stream *stream, const struct etna_perf *p);
 
 #endif /* ETNAVIV_DRMIF_H_ */
diff --git a/src/gallium/drivers/etnaviv/etnaviv_emit.c b/src/gallium/drivers/etnaviv/etnaviv_emit.c
index f788896..aef4b14 100644
--- a/src/gallium/drivers/etnaviv/etnaviv_emit.c
+++ b/src/gallium/drivers/etnaviv/etnaviv_emit.c
@@ -48,24 +48,24 @@
 static inline void
 CMD_STALL(struct etna_cmd_stream *stream, uint32_t from, uint32_t to)
 {
-   etna_cmd_stream_emit(stream, VIV_FE_STALL_HEADER_OP_STALL);
-   etna_cmd_stream_emit(stream, VIV_FE_STALL_TOKEN_FROM(from) | VIV_FE_STALL_TOKEN_TO(to));
+   etna_drm_cmd_stream_emit(stream, VIV_FE_STALL_HEADER_OP_STALL);
+   etna_drm_cmd_stream_emit(stream, VIV_FE_STALL_TOKEN_FROM(from) | VIV_FE_STALL_TOKEN_TO(to));
 }
 
 void
 etna_stall(struct etna_cmd_stream *stream, uint32_t from, uint32_t to)
 {
    bool blt = (from == SYNC_RECIPIENT_BLT) || (to == SYNC_RECIPIENT_BLT);
-   etna_cmd_stream_reserve(stream, blt ? 8 : 4);
+   etna_drm_cmd_stream_reserve(stream, blt ? 8 : 4);
 
    if (blt) {
       etna_emit_load_state(stream, VIVS_BLT_ENABLE >> 2, 1, 0);
-      etna_cmd_stream_emit(stream, 1);
+      etna_drm_cmd_stream_emit(stream, 1);
    }
 
    /* TODO: set bit 28/29 of token after BLT COPY_BUFFER */
    etna_emit_load_state(stream, VIVS_GL_SEMAPHORE_TOKEN >> 2, 1, 0);
-   etna_cmd_stream_emit(stream, VIVS_GL_SEMAPHORE_TOKEN_FROM(from) | VIVS_GL_SEMAPHORE_TOKEN_TO(to));
+   etna_drm_cmd_stream_emit(stream, VIVS_GL_SEMAPHORE_TOKEN_FROM(from) | VIVS_GL_SEMAPHORE_TOKEN_TO(to));
 
    if (from == SYNC_RECIPIENT_FE) {
       /* if the frontend is to be stalled, queue a STALL frontend command */
@@ -73,12 +73,12 @@ etna_stall(struct etna_cmd_stream *stream, uint32_t from, uint32_t to)
    } else {
       /* otherwise, load the STALL token state */
       etna_emit_load_state(stream, VIVS_GL_STALL_TOKEN >> 2, 1, 0);
-      etna_cmd_stream_emit(stream, VIVS_GL_STALL_TOKEN_FROM(from) | VIVS_GL_STALL_TOKEN_TO(to));
+      etna_drm_cmd_stream_emit(stream, VIVS_GL_STALL_TOKEN_FROM(from) | VIVS_GL_STALL_TOKEN_TO(to));
    }
 
    if (blt) {
       etna_emit_load_state(stream, VIVS_BLT_ENABLE >> 2, 1, 0);
-      etna_cmd_stream_emit(stream, 0);
+      etna_drm_cmd_stream_emit(stream, 0);
    }
 }
 
@@ -218,7 +218,7 @@ etna_emit_state(struct etna_context *ctx)
    /* Pre-reserve the command buffer space which we are likely to need.
     * This must cover all the state emitted below, and the following
     * draw command. */
-   etna_cmd_stream_reserve(stream, required_stream_size(ctx));
+   etna_drm_cmd_stream_reserve(stream, required_stream_size(ctx));
 
    uint32_t dirty = ctx->dirty;
 
diff --git a/src/gallium/drivers/etnaviv/etnaviv_emit.h b/src/gallium/drivers/etnaviv/etnaviv_emit.h
index b4670ee..ea46bc9 100644
--- a/src/gallium/drivers/etnaviv/etnaviv_emit.h
+++ b/src/gallium/drivers/etnaviv/etnaviv_emit.h
@@ -52,24 +52,24 @@ etna_emit_load_state(struct etna_cmd_stream *stream, const uint16_t offset,
        (VIV_FE_LOAD_STATE_HEADER_COUNT(count) &
         VIV_FE_LOAD_STATE_HEADER_COUNT__MASK);
 
-   etna_cmd_stream_emit(stream, v);
+   etna_drm_cmd_stream_emit(stream, v);
 }
 
 static inline void
 etna_set_state(struct etna_cmd_stream *stream, uint32_t address, uint32_t value)
 {
-   etna_cmd_stream_reserve(stream, 2);
+   etna_drm_cmd_stream_reserve(stream, 2);
    etna_emit_load_state(stream, address >> 2, 1, 0);
-   etna_cmd_stream_emit(stream, value);
+   etna_drm_cmd_stream_emit(stream, value);
 }
 
 static inline void
 etna_set_state_reloc(struct etna_cmd_stream *stream, uint32_t address,
                      const struct etna_reloc *reloc)
 {
-   etna_cmd_stream_reserve(stream, 2);
+   etna_drm_cmd_stream_reserve(stream, 2);
    etna_emit_load_state(stream, address >> 2, 1, 0);
-   etna_cmd_stream_reloc(stream, reloc);
+   etna_drm_cmd_stream_reloc(stream, reloc);
 }
 
 static inline void
@@ -79,15 +79,15 @@ etna_set_state_multi(struct etna_cmd_stream *stream, uint32_t base,
    if (num == 0)
       return;
 
-   etna_cmd_stream_reserve(stream, 1 + num + 1); /* 1 extra for potential alignment */
+   etna_drm_cmd_stream_reserve(stream, 1 + num + 1); /* 1 extra for potential alignment */
    etna_emit_load_state(stream, base >> 2, num, 0);
 
    for (uint32_t i = 0; i < num; i++)
-      etna_cmd_stream_emit(stream, values[i]);
+      etna_drm_cmd_stream_emit(stream, values[i]);
 
    /* add potential padding */
    if ((num % 2) == 0)
-      etna_cmd_stream_emit(stream, 0);
+      etna_drm_cmd_stream_emit(stream, 0);
 }
 
 void
@@ -97,12 +97,12 @@ static inline void
 etna_draw_primitives(struct etna_cmd_stream *stream, uint32_t primitive_type,
                      uint32_t start, uint32_t count)
 {
-   etna_cmd_stream_reserve(stream, 4);
+   etna_drm_cmd_stream_reserve(stream, 4);
 
-   etna_cmd_stream_emit(stream, VIV_FE_DRAW_PRIMITIVES_HEADER_OP_DRAW_PRIMITIVES);
-   etna_cmd_stream_emit(stream, primitive_type);
-   etna_cmd_stream_emit(stream, start);
-   etna_cmd_stream_emit(stream, count);
+   etna_drm_cmd_stream_emit(stream, VIV_FE_DRAW_PRIMITIVES_HEADER_OP_DRAW_PRIMITIVES);
+   etna_drm_cmd_stream_emit(stream, primitive_type);
+   etna_drm_cmd_stream_emit(stream, start);
+   etna_drm_cmd_stream_emit(stream, count);
 }
 
 static inline void
@@ -110,14 +110,14 @@ etna_draw_indexed_primitives(struct etna_cmd_stream *stream,
                              uint32_t primitive_type, uint32_t start,
                              uint32_t count, uint32_t offset)
 {
-   etna_cmd_stream_reserve(stream, 5 + 1);
-
-   etna_cmd_stream_emit(stream, VIV_FE_DRAW_INDEXED_PRIMITIVES_HEADER_OP_DRAW_INDEXED_PRIMITIVES);
-   etna_cmd_stream_emit(stream, primitive_type);
-   etna_cmd_stream_emit(stream, start);
-   etna_cmd_stream_emit(stream, count);
-   etna_cmd_stream_emit(stream, offset);
-   etna_cmd_stream_emit(stream, 0);
+   etna_drm_cmd_stream_reserve(stream, 5 + 1);
+
+   etna_drm_cmd_stream_emit(stream, VIV_FE_DRAW_INDEXED_PRIMITIVES_HEADER_OP_DRAW_INDEXED_PRIMITIVES);
+   etna_drm_cmd_stream_emit(stream, primitive_type);
+   etna_drm_cmd_stream_emit(stream, start);
+   etna_drm_cmd_stream_emit(stream, count);
+   etna_drm_cmd_stream_emit(stream, offset);
+   etna_drm_cmd_stream_emit(stream, 0);
 }
 
 /* important: this takes a vertex count, not a primitive count */
@@ -127,25 +127,25 @@ etna_draw_instanced(struct etna_cmd_stream *stream,
                     uint32_t instance_count,
                     uint32_t vertex_count, uint32_t offset)
 {
-   etna_cmd_stream_reserve(stream, 3 + 1);
-   etna_cmd_stream_emit(stream,
+   etna_drm_cmd_stream_reserve(stream, 3 + 1);
+   etna_drm_cmd_stream_emit(stream,
       VIV_FE_DRAW_INSTANCED_HEADER_OP_DRAW_INSTANCED |
       COND(indexed, VIV_FE_DRAW_INSTANCED_HEADER_INDEXED) |
       VIV_FE_DRAW_INSTANCED_HEADER_TYPE(primitive_type) |
       VIV_FE_DRAW_INSTANCED_HEADER_INSTANCE_COUNT_LO(instance_count & 0xffff));
-   etna_cmd_stream_emit(stream,
+   etna_drm_cmd_stream_emit(stream,
       VIV_FE_DRAW_INSTANCED_COUNT_INSTANCE_COUNT_HI(instance_count >> 16) |
       VIV_FE_DRAW_INSTANCED_COUNT_VERTEX_COUNT(vertex_count));
-   etna_cmd_stream_emit(stream,
+   etna_drm_cmd_stream_emit(stream,
       VIV_FE_DRAW_INSTANCED_START_INDEX(offset));
-   etna_cmd_stream_emit(stream, 0);
+   etna_drm_cmd_stream_emit(stream, 0);
 }
 
 static inline void
 etna_coalesce_start(struct etna_cmd_stream *stream,
                     struct etna_coalesce *coalesce)
 {
-   coalesce->start = etna_cmd_stream_offset(stream);
+   coalesce->start = etna_drm_cmd_stream_offset(stream);
    coalesce->last_reg = 0;
    coalesce->last_fixp = 0;
 }
@@ -154,20 +154,20 @@ static inline void
 etna_coalesce_end(struct etna_cmd_stream *stream,
                   struct etna_coalesce *coalesce)
 {
-   uint32_t end = etna_cmd_stream_offset(stream);
+   uint32_t end = etna_drm_cmd_stream_offset(stream);
    uint32_t size = end - coalesce->start;
 
    if (size) {
       uint32_t offset = coalesce->start - 1;
-      uint32_t value = etna_cmd_stream_get(stream, offset);
+      uint32_t value = etna_drm_cmd_stream_get(stream, offset);
 
       value |= VIV_FE_LOAD_STATE_HEADER_COUNT(size);
-      etna_cmd_stream_set(stream, offset, value);
+      etna_drm_cmd_stream_set(stream, offset, value);
    }
 
    /* append needed padding */
    if (end % 2 == 1)
-      etna_cmd_stream_emit(stream, 0xdeadbeef);
+      etna_drm_cmd_stream_emit(stream, 0xdeadbeef);
 }
 
 static inline void
@@ -178,11 +178,11 @@ check_coalsence(struct etna_cmd_stream *stream, struct etna_coalesce *coalesce,
       if (((coalesce->last_reg + 4) != reg) || (coalesce->last_fixp != fixp)) {
          etna_coalesce_end(stream, coalesce);
          etna_emit_load_state(stream, reg >> 2, 0, fixp);
-         coalesce->start = etna_cmd_stream_offset(stream);
+         coalesce->start = etna_drm_cmd_stream_offset(stream);
       }
    } else {
       etna_emit_load_state(stream, reg >> 2, 0, fixp);
-      coalesce->start = etna_cmd_stream_offset(stream);
+      coalesce->start = etna_drm_cmd_stream_offset(stream);
    }
 
    coalesce->last_reg = reg;
@@ -195,7 +195,7 @@ etna_coalsence_emit(struct etna_cmd_stream *stream,
                     uint32_t value)
 {
    check_coalsence(stream, coalesce, reg, 0);
-   etna_cmd_stream_emit(stream, value);
+   etna_drm_cmd_stream_emit(stream, value);
 }
 
 static inline void
@@ -204,7 +204,7 @@ etna_coalsence_emit_fixp(struct etna_cmd_stream *stream,
                          uint32_t value)
 {
    check_coalsence(stream, coalesce, reg, 1);
-   etna_cmd_stream_emit(stream, value);
+   etna_drm_cmd_stream_emit(stream, value);
 }
 
 static inline void
@@ -214,7 +214,7 @@ etna_coalsence_emit_reloc(struct etna_cmd_stream *stream,
 {
    if (r->bo) {
       check_coalsence(stream, coalesce, reg, 0);
-      etna_cmd_stream_reloc(stream, r);
+      etna_drm_cmd_stream_reloc(stream, r);
    }
 }
 
diff --git a/src/gallium/drivers/etnaviv/etnaviv_fence.c b/src/gallium/drivers/etnaviv/etnaviv_fence.c
index 0a83f34..a183a50 100644
--- a/src/gallium/drivers/etnaviv/etnaviv_fence.c
+++ b/src/gallium/drivers/etnaviv/etnaviv_fence.c
@@ -111,7 +111,7 @@ etna_fence_create(struct pipe_context *pctx, int fence_fd)
    pipe_reference_init(&fence->reference, 1);
 
    fence->screen = ctx->screen;
-   fence->timestamp = etna_cmd_stream_timestamp(ctx->stream);
+   fence->timestamp = etna_drm_cmd_stream_timestamp(ctx->stream);
    fence->fence_fd = fence_fd;
 
    return fence;
diff --git a/src/gallium/drivers/etnaviv/etnaviv_query_pm.c b/src/gallium/drivers/etnaviv/etnaviv_query_pm.c
index 31044a7..15204b7 100644
--- a/src/gallium/drivers/etnaviv/etnaviv_query_pm.c
+++ b/src/gallium/drivers/etnaviv/etnaviv_query_pm.c
@@ -497,7 +497,7 @@ etna_pm_query_get(struct etna_cmd_stream *stream, struct etna_query *q,
       .offset = offset
    };
 
-   etna_cmd_stream_perf(stream, &p);
+   etna_drm_cmd_stream_perf(stream, &p);
 }
 
 static inline void
diff --git a/src/gallium/drivers/etnaviv/etnaviv_rs.c b/src/gallium/drivers/etnaviv/etnaviv_rs.c
index ec1c4b4..0fbe85f 100644
--- a/src/gallium/drivers/etnaviv/etnaviv_rs.c
+++ b/src/gallium/drivers/etnaviv/etnaviv_rs.c
@@ -186,14 +186,14 @@ etna_submit_rs_state(struct etna_context *ctx,
    ctx->stats.rs_operations++;
 
    if (cs->RS_KICKER_INPLACE) {
-      etna_cmd_stream_reserve(stream, 6);
+      etna_drm_cmd_stream_reserve(stream, 6);
       etna_coalesce_start(stream, &coalesce);
       /* 0/1 */ EMIT_STATE(RS_EXTRA_CONFIG, cs->RS_EXTRA_CONFIG);
       /* 2/3 */ EMIT_STATE(RS_SOURCE_STRIDE, cs->RS_SOURCE_STRIDE);
       /* 4/5 */ EMIT_STATE(RS_KICKER_INPLACE, cs->RS_KICKER_INPLACE);
       etna_coalesce_end(stream, &coalesce);
    } else if (screen->specs.pixel_pipes == 1) {
-      etna_cmd_stream_reserve(stream, 22);
+      etna_drm_cmd_stream_reserve(stream, 22);
       etna_coalesce_start(stream, &coalesce);
       /* 0/1 */ EMIT_STATE(RS_CONFIG, cs->RS_CONFIG);
       /* 2   */ EMIT_STATE_RELOC(RS_SOURCE_ADDR, &cs->source[0]);
@@ -213,7 +213,7 @@ etna_submit_rs_state(struct etna_context *ctx,
       /*20/21*/ EMIT_STATE(RS_KICKER, 0xbeebbeeb);
       etna_coalesce_end(stream, &coalesce);
    } else if (screen->specs.pixel_pipes == 2) {
-      etna_cmd_stream_reserve(stream, 34); /* worst case - both pipes multi=1 */
+      etna_drm_cmd_stream_reserve(stream, 34); /* worst case - both pipes multi=1 */
       etna_coalesce_start(stream, &coalesce);
       /* 0/1 */ EMIT_STATE(RS_CONFIG, cs->RS_CONFIG);
       /* 2/3 */ EMIT_STATE(RS_SOURCE_STRIDE, cs->RS_SOURCE_STRIDE);
diff --git a/src/gallium/winsys/etnaviv/drm/etnaviv_drm_cmd_stream.c b/src/gallium/winsys/etnaviv/drm/etnaviv_drm_cmd_stream.c
index 25c18e2..637bf7e 100644
--- a/src/gallium/winsys/etnaviv/drm/etnaviv_drm_cmd_stream.c
+++ b/src/gallium/winsys/etnaviv/drm/etnaviv_drm_cmd_stream.c
@@ -55,7 +55,7 @@ etna_cmd_stream_priv(struct etna_cmd_stream *stream)
     return (struct etna_cmd_stream_priv *)stream;
 }
 
-struct etna_cmd_stream *etna_cmd_stream_new(struct etna_pipe *pipe,
+struct etna_cmd_stream *etna_drm_cmd_stream_new(struct etna_pipe *pipe,
         uint32_t size,
 		void (*reset_notify)(struct etna_cmd_stream *stream, void *priv),
 		void *priv)
@@ -91,12 +91,12 @@ struct etna_cmd_stream *etna_cmd_stream_new(struct etna_pipe *pipe,
 
 fail:
 	if (stream)
-		etna_cmd_stream_del(&stream->base);
+		etna_drm_cmd_stream_del(&stream->base);
 
 	return NULL;
 }
 
-void etna_cmd_stream_del(struct etna_cmd_stream *stream)
+void etna_drm_cmd_stream_del(struct etna_cmd_stream *stream)
 {
 	struct etna_cmd_stream_priv *priv = etna_cmd_stream_priv(stream);
 
@@ -120,7 +120,7 @@ static void reset_buffer(struct etna_cmd_stream *stream)
 		priv->reset_notify(stream, priv->reset_notify_priv);
 }
 
-uint32_t etna_cmd_stream_timestamp(struct etna_cmd_stream *stream)
+uint32_t etna_drm_cmd_stream_timestamp(struct etna_cmd_stream *stream)
 {
 	return etna_cmd_stream_priv(stream)->last_timestamp;
 }
@@ -223,13 +223,13 @@ static void flush(struct etna_cmd_stream *stream, int in_fence_fd,
 		*out_fence_fd = req.fence_fd;
 }
 
-void etna_cmd_stream_flush(struct etna_cmd_stream *stream)
+void etna_drm_cmd_stream_flush(struct etna_cmd_stream *stream)
 {
 	flush(stream, -1, NULL);
 	reset_buffer(stream);
 }
 
-void etna_cmd_stream_flush2(struct etna_cmd_stream *stream,
+void etna_drm_cmd_stream_flush2(struct etna_cmd_stream *stream,
 									   int in_fence_fd,
 									   int *out_fence_fd)
 {
@@ -237,7 +237,7 @@ void etna_cmd_stream_flush2(struct etna_cmd_stream *stream,
 	reset_buffer(stream);
 }
 
-void etna_cmd_stream_finish(struct etna_cmd_stream *stream)
+void etna_drm_cmd_stream_finish(struct etna_cmd_stream *stream)
 {
 	struct etna_cmd_stream_priv *priv = etna_cmd_stream_priv(stream);
 
@@ -246,7 +246,7 @@ void etna_cmd_stream_finish(struct etna_cmd_stream *stream)
 	reset_buffer(stream);
 }
 
-void etna_cmd_stream_reloc(struct etna_cmd_stream *stream,
+void etna_drm_cmd_stream_reloc(struct etna_cmd_stream *stream,
 									  const struct etna_reloc *r)
 {
 	struct etna_cmd_stream_priv *priv = etna_cmd_stream_priv(stream);
@@ -261,10 +261,10 @@ void etna_cmd_stream_reloc(struct etna_cmd_stream *stream,
 	reloc->submit_offset = stream->offset * 4; /* in bytes */
 	reloc->flags = 0;
 
-	etna_cmd_stream_emit(stream, addr);
+	etna_drm_cmd_stream_emit(stream, addr);
 }
 
-void etna_cmd_stream_perf(struct etna_cmd_stream *stream, const struct etna_perf *p)
+void etna_drm_cmd_stream_perf(struct etna_cmd_stream *stream, const struct etna_perf *p)
 {
 	struct etna_cmd_stream_priv *priv = etna_cmd_stream_priv(stream);
 	struct drm_etnaviv_gem_submit_pmr *pmr;
